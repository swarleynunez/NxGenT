// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TypesDTSInfo is an auto generated low-level Go binding around an user-defined struct.
type TypesDTSInfo struct {
	A       *big.Int
	B       *big.Int
	Dts     *big.Int
	R       *big.Int
	Cp      *big.Int
	Na      uint64
	Nb      uint64
	NCounts []TypesNCount
}

// TypesNCount is an auto generated low-level Go binding around an user-defined struct.
type TypesNCount struct {
	Na        uint64
	Nb        uint64
	CountedAt *big.Int
}

// TrustManagerMetaData contains all meta data concerning the TrustManager contract.
var TrustManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"srTime\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Abs_MinSD59x18\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Div_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Div_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Mul_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Mul_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"slaId\",\"type\":\"uint64\"}],\"name\":\"canSendEvidence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumTypes.MetricType\",\"name\":\"mt\",\"type\":\"uint8\"},{\"internalType\":\"SD59x18\",\"name\":\"x_m\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"t_m\",\"type\":\"int256\"}],\"name\":\"checkEvidenceMetric\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"xp_m\",\"type\":\"int256\"},{\"internalType\":\"enumTypes.DTSType\",\"name\":\"dtst\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"na\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nb\",\"type\":\"uint64\"}],\"name\":\"computeC\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"computeNewDTS\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"computeNewRScore\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"r\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"epochTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"searchRangeTime\",\"type\":\"uint64\"},{\"internalType\":\"SD59x18\",\"name\":\"k_evn\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"pf\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"k_rup\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"w_c\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metricId\",\"type\":\"string\"}],\"name\":\"existMetric\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getCurrentIntervalNCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"na_in\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nb_in\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getDTSInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"SD59x18\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"b\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"dts\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"r\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"cp\",\"type\":\"int256\"},{\"internalType\":\"uint64\",\"name\":\"na\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nb\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"na\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nb\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"countedAt\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.NCount[]\",\"name\":\"nCounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structTypes.DTSInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRScore\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"r\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRScoreCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredTrustNodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"hasDirectScore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"isIPAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isTrustNodeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nodeIPs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x_m\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"t_m\",\"type\":\"int256\"}],\"name\":\"normalizeMetricValue\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"registerTrustNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_slaId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"SD59x18\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"structTypes.EvidenceMetric[]\",\"name\":\"_metrics\",\"type\":\"tuple[]\"}],\"name\":\"sendEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deployedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// TrustManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use TrustManagerMetaData.ABI instead.
var TrustManagerABI = TrustManagerMetaData.ABI

// TrustManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TrustManagerMetaData.Bin instead.
var TrustManagerBin = TrustManagerMetaData.Bin

// DeployTrustManager deploys a new Ethereum contract, binding an instance of TrustManager to it.
func DeployTrustManager(auth *bind.TransactOpts, backend bind.ContractBackend, epTime uint64, srTime uint64) (common.Address, *types.Transaction, *TrustManager, error) {
	parsed, err := TrustManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TrustManagerBin), backend, epTime, srTime)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TrustManager{TrustManagerCaller: TrustManagerCaller{contract: contract}, TrustManagerTransactor: TrustManagerTransactor{contract: contract}, TrustManagerFilterer: TrustManagerFilterer{contract: contract}}, nil
}

// TrustManager is an auto generated Go binding around an Ethereum contract.
type TrustManager struct {
	TrustManagerCaller     // Read-only binding to the contract
	TrustManagerTransactor // Write-only binding to the contract
	TrustManagerFilterer   // Log filterer for contract events
}

// TrustManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type TrustManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrustManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TrustManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrustManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TrustManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrustManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TrustManagerSession struct {
	Contract     *TrustManager     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TrustManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TrustManagerCallerSession struct {
	Contract *TrustManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TrustManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TrustManagerTransactorSession struct {
	Contract     *TrustManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TrustManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type TrustManagerRaw struct {
	Contract *TrustManager // Generic contract binding to access the raw methods on
}

// TrustManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TrustManagerCallerRaw struct {
	Contract *TrustManagerCaller // Generic read-only contract binding to access the raw methods on
}

// TrustManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TrustManagerTransactorRaw struct {
	Contract *TrustManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTrustManager creates a new instance of TrustManager, bound to a specific deployed contract.
func NewTrustManager(address common.Address, backend bind.ContractBackend) (*TrustManager, error) {
	contract, err := bindTrustManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TrustManager{TrustManagerCaller: TrustManagerCaller{contract: contract}, TrustManagerTransactor: TrustManagerTransactor{contract: contract}, TrustManagerFilterer: TrustManagerFilterer{contract: contract}}, nil
}

// NewTrustManagerCaller creates a new read-only instance of TrustManager, bound to a specific deployed contract.
func NewTrustManagerCaller(address common.Address, caller bind.ContractCaller) (*TrustManagerCaller, error) {
	contract, err := bindTrustManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TrustManagerCaller{contract: contract}, nil
}

// NewTrustManagerTransactor creates a new write-only instance of TrustManager, bound to a specific deployed contract.
func NewTrustManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*TrustManagerTransactor, error) {
	contract, err := bindTrustManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TrustManagerTransactor{contract: contract}, nil
}

// NewTrustManagerFilterer creates a new log filterer instance of TrustManager, bound to a specific deployed contract.
func NewTrustManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*TrustManagerFilterer, error) {
	contract, err := bindTrustManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TrustManagerFilterer{contract: contract}, nil
}

// bindTrustManager binds a generic wrapper to an already deployed contract.
func bindTrustManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TrustManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TrustManager *TrustManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TrustManager.Contract.TrustManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TrustManager *TrustManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TrustManager.Contract.TrustManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TrustManager *TrustManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TrustManager.Contract.TrustManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TrustManager *TrustManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TrustManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TrustManager *TrustManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TrustManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TrustManager *TrustManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TrustManager.Contract.contract.Transact(opts, method, params...)
}

// CanSendEvidence is a free data retrieval call binding the contract method 0xd5b57f34.
//
// Solidity: function canSendEvidence(address sender, address target, uint64 slaId) view returns(bool)
func (_TrustManager *TrustManagerCaller) CanSendEvidence(opts *bind.CallOpts, sender common.Address, target common.Address, slaId uint64) (bool, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "canSendEvidence", sender, target, slaId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanSendEvidence is a free data retrieval call binding the contract method 0xd5b57f34.
//
// Solidity: function canSendEvidence(address sender, address target, uint64 slaId) view returns(bool)
func (_TrustManager *TrustManagerSession) CanSendEvidence(sender common.Address, target common.Address, slaId uint64) (bool, error) {
	return _TrustManager.Contract.CanSendEvidence(&_TrustManager.CallOpts, sender, target, slaId)
}

// CanSendEvidence is a free data retrieval call binding the contract method 0xd5b57f34.
//
// Solidity: function canSendEvidence(address sender, address target, uint64 slaId) view returns(bool)
func (_TrustManager *TrustManagerCallerSession) CanSendEvidence(sender common.Address, target common.Address, slaId uint64) (bool, error) {
	return _TrustManager.Contract.CanSendEvidence(&_TrustManager.CallOpts, sender, target, slaId)
}

// CheckEvidenceMetric is a free data retrieval call binding the contract method 0x6dcda9da.
//
// Solidity: function checkEvidenceMetric(uint8 mt, int256 x_m, int256 t_m) view returns(int256 xp_m, uint8 dtst)
func (_TrustManager *TrustManagerCaller) CheckEvidenceMetric(opts *bind.CallOpts, mt uint8, x_m *big.Int, t_m *big.Int) (struct {
	XpM  *big.Int
	Dtst uint8
}, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "checkEvidenceMetric", mt, x_m, t_m)

	outstruct := new(struct {
		XpM  *big.Int
		Dtst uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.XpM = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Dtst = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CheckEvidenceMetric is a free data retrieval call binding the contract method 0x6dcda9da.
//
// Solidity: function checkEvidenceMetric(uint8 mt, int256 x_m, int256 t_m) view returns(int256 xp_m, uint8 dtst)
func (_TrustManager *TrustManagerSession) CheckEvidenceMetric(mt uint8, x_m *big.Int, t_m *big.Int) (struct {
	XpM  *big.Int
	Dtst uint8
}, error) {
	return _TrustManager.Contract.CheckEvidenceMetric(&_TrustManager.CallOpts, mt, x_m, t_m)
}

// CheckEvidenceMetric is a free data retrieval call binding the contract method 0x6dcda9da.
//
// Solidity: function checkEvidenceMetric(uint8 mt, int256 x_m, int256 t_m) view returns(int256 xp_m, uint8 dtst)
func (_TrustManager *TrustManagerCallerSession) CheckEvidenceMetric(mt uint8, x_m *big.Int, t_m *big.Int) (struct {
	XpM  *big.Int
	Dtst uint8
}, error) {
	return _TrustManager.Contract.CheckEvidenceMetric(&_TrustManager.CallOpts, mt, x_m, t_m)
}

// ComputeC is a free data retrieval call binding the contract method 0x114eef5c.
//
// Solidity: function computeC(address addr, address target, uint64 na, uint64 nb) view returns(int256)
func (_TrustManager *TrustManagerCaller) ComputeC(opts *bind.CallOpts, addr common.Address, target common.Address, na uint64, nb uint64) (*big.Int, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "computeC", addr, target, na, nb)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ComputeC is a free data retrieval call binding the contract method 0x114eef5c.
//
// Solidity: function computeC(address addr, address target, uint64 na, uint64 nb) view returns(int256)
func (_TrustManager *TrustManagerSession) ComputeC(addr common.Address, target common.Address, na uint64, nb uint64) (*big.Int, error) {
	return _TrustManager.Contract.ComputeC(&_TrustManager.CallOpts, addr, target, na, nb)
}

// ComputeC is a free data retrieval call binding the contract method 0x114eef5c.
//
// Solidity: function computeC(address addr, address target, uint64 na, uint64 nb) view returns(int256)
func (_TrustManager *TrustManagerCallerSession) ComputeC(addr common.Address, target common.Address, na uint64, nb uint64) (*big.Int, error) {
	return _TrustManager.Contract.ComputeC(&_TrustManager.CallOpts, addr, target, na, nb)
}

// ComputeNewDTS is a free data retrieval call binding the contract method 0x174cb12d.
//
// Solidity: function computeNewDTS(int256 a, int256 b) view returns(int256)
func (_TrustManager *TrustManagerCaller) ComputeNewDTS(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "computeNewDTS", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ComputeNewDTS is a free data retrieval call binding the contract method 0x174cb12d.
//
// Solidity: function computeNewDTS(int256 a, int256 b) view returns(int256)
func (_TrustManager *TrustManagerSession) ComputeNewDTS(a *big.Int, b *big.Int) (*big.Int, error) {
	return _TrustManager.Contract.ComputeNewDTS(&_TrustManager.CallOpts, a, b)
}

// ComputeNewDTS is a free data retrieval call binding the contract method 0x174cb12d.
//
// Solidity: function computeNewDTS(int256 a, int256 b) view returns(int256)
func (_TrustManager *TrustManagerCallerSession) ComputeNewDTS(a *big.Int, b *big.Int) (*big.Int, error) {
	return _TrustManager.Contract.ComputeNewDTS(&_TrustManager.CallOpts, a, b)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint64 epochTime, uint64 searchRangeTime, int256 k_evn, int256 pf, int256 y, int256 k_rup, int256 w_c)
func (_TrustManager *TrustManagerCaller) Config(opts *bind.CallOpts) (struct {
	EpochTime       uint64
	SearchRangeTime uint64
	KEvn            *big.Int
	Pf              *big.Int
	Y               *big.Int
	KRup            *big.Int
	WC              *big.Int
}, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		EpochTime       uint64
		SearchRangeTime uint64
		KEvn            *big.Int
		Pf              *big.Int
		Y               *big.Int
		KRup            *big.Int
		WC              *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EpochTime = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.SearchRangeTime = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.KEvn = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Pf = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.KRup = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.WC = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint64 epochTime, uint64 searchRangeTime, int256 k_evn, int256 pf, int256 y, int256 k_rup, int256 w_c)
func (_TrustManager *TrustManagerSession) Config() (struct {
	EpochTime       uint64
	SearchRangeTime uint64
	KEvn            *big.Int
	Pf              *big.Int
	Y               *big.Int
	KRup            *big.Int
	WC              *big.Int
}, error) {
	return _TrustManager.Contract.Config(&_TrustManager.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint64 epochTime, uint64 searchRangeTime, int256 k_evn, int256 pf, int256 y, int256 k_rup, int256 w_c)
func (_TrustManager *TrustManagerCallerSession) Config() (struct {
	EpochTime       uint64
	SearchRangeTime uint64
	KEvn            *big.Int
	Pf              *big.Int
	Y               *big.Int
	KRup            *big.Int
	WC              *big.Int
}, error) {
	return _TrustManager.Contract.Config(&_TrustManager.CallOpts)
}

// ExistMetric is a free data retrieval call binding the contract method 0xd4465054.
//
// Solidity: function existMetric(string metricId) view returns(bool)
func (_TrustManager *TrustManagerCaller) ExistMetric(opts *bind.CallOpts, metricId string) (bool, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "existMetric", metricId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistMetric is a free data retrieval call binding the contract method 0xd4465054.
//
// Solidity: function existMetric(string metricId) view returns(bool)
func (_TrustManager *TrustManagerSession) ExistMetric(metricId string) (bool, error) {
	return _TrustManager.Contract.ExistMetric(&_TrustManager.CallOpts, metricId)
}

// ExistMetric is a free data retrieval call binding the contract method 0xd4465054.
//
// Solidity: function existMetric(string metricId) view returns(bool)
func (_TrustManager *TrustManagerCallerSession) ExistMetric(metricId string) (bool, error) {
	return _TrustManager.Contract.ExistMetric(&_TrustManager.CallOpts, metricId)
}

// GetCurrentIntervalNCount is a free data retrieval call binding the contract method 0xe5e21702.
//
// Solidity: function getCurrentIntervalNCount(address addr, address target) view returns(uint64 na_in, uint64 nb_in)
func (_TrustManager *TrustManagerCaller) GetCurrentIntervalNCount(opts *bind.CallOpts, addr common.Address, target common.Address) (struct {
	NaIn uint64
	NbIn uint64
}, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "getCurrentIntervalNCount", addr, target)

	outstruct := new(struct {
		NaIn uint64
		NbIn uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NaIn = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.NbIn = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// GetCurrentIntervalNCount is a free data retrieval call binding the contract method 0xe5e21702.
//
// Solidity: function getCurrentIntervalNCount(address addr, address target) view returns(uint64 na_in, uint64 nb_in)
func (_TrustManager *TrustManagerSession) GetCurrentIntervalNCount(addr common.Address, target common.Address) (struct {
	NaIn uint64
	NbIn uint64
}, error) {
	return _TrustManager.Contract.GetCurrentIntervalNCount(&_TrustManager.CallOpts, addr, target)
}

// GetCurrentIntervalNCount is a free data retrieval call binding the contract method 0xe5e21702.
//
// Solidity: function getCurrentIntervalNCount(address addr, address target) view returns(uint64 na_in, uint64 nb_in)
func (_TrustManager *TrustManagerCallerSession) GetCurrentIntervalNCount(addr common.Address, target common.Address) (struct {
	NaIn uint64
	NbIn uint64
}, error) {
	return _TrustManager.Contract.GetCurrentIntervalNCount(&_TrustManager.CallOpts, addr, target)
}

// GetDTSInfo is a free data retrieval call binding the contract method 0x54dae0f1.
//
// Solidity: function getDTSInfo(address addr, address target) view returns((int256,int256,int256,int256,int256,uint64,uint64,(uint64,uint64,uint256)[]))
func (_TrustManager *TrustManagerCaller) GetDTSInfo(opts *bind.CallOpts, addr common.Address, target common.Address) (TypesDTSInfo, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "getDTSInfo", addr, target)

	if err != nil {
		return *new(TypesDTSInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(TypesDTSInfo)).(*TypesDTSInfo)

	return out0, err

}

// GetDTSInfo is a free data retrieval call binding the contract method 0x54dae0f1.
//
// Solidity: function getDTSInfo(address addr, address target) view returns((int256,int256,int256,int256,int256,uint64,uint64,(uint64,uint64,uint256)[]))
func (_TrustManager *TrustManagerSession) GetDTSInfo(addr common.Address, target common.Address) (TypesDTSInfo, error) {
	return _TrustManager.Contract.GetDTSInfo(&_TrustManager.CallOpts, addr, target)
}

// GetDTSInfo is a free data retrieval call binding the contract method 0x54dae0f1.
//
// Solidity: function getDTSInfo(address addr, address target) view returns((int256,int256,int256,int256,int256,uint64,uint64,(uint64,uint64,uint256)[]))
func (_TrustManager *TrustManagerCallerSession) GetDTSInfo(addr common.Address, target common.Address) (TypesDTSInfo, error) {
	return _TrustManager.Contract.GetDTSInfo(&_TrustManager.CallOpts, addr, target)
}

// GetRScore is a free data retrieval call binding the contract method 0x18b2ce96.
//
// Solidity: function getRScore(address addr) view returns(int256 r)
func (_TrustManager *TrustManagerCaller) GetRScore(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "getRScore", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRScore is a free data retrieval call binding the contract method 0x18b2ce96.
//
// Solidity: function getRScore(address addr) view returns(int256 r)
func (_TrustManager *TrustManagerSession) GetRScore(addr common.Address) (*big.Int, error) {
	return _TrustManager.Contract.GetRScore(&_TrustManager.CallOpts, addr)
}

// GetRScore is a free data retrieval call binding the contract method 0x18b2ce96.
//
// Solidity: function getRScore(address addr) view returns(int256 r)
func (_TrustManager *TrustManagerCallerSession) GetRScore(addr common.Address) (*big.Int, error) {
	return _TrustManager.Contract.GetRScore(&_TrustManager.CallOpts, addr)
}

// GetRScoreCount is a free data retrieval call binding the contract method 0x6b22cc14.
//
// Solidity: function getRScoreCount(address addr) view returns(uint256)
func (_TrustManager *TrustManagerCaller) GetRScoreCount(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "getRScoreCount", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRScoreCount is a free data retrieval call binding the contract method 0x6b22cc14.
//
// Solidity: function getRScoreCount(address addr) view returns(uint256)
func (_TrustManager *TrustManagerSession) GetRScoreCount(addr common.Address) (*big.Int, error) {
	return _TrustManager.Contract.GetRScoreCount(&_TrustManager.CallOpts, addr)
}

// GetRScoreCount is a free data retrieval call binding the contract method 0x6b22cc14.
//
// Solidity: function getRScoreCount(address addr) view returns(uint256)
func (_TrustManager *TrustManagerCallerSession) GetRScoreCount(addr common.Address) (*big.Int, error) {
	return _TrustManager.Contract.GetRScoreCount(&_TrustManager.CallOpts, addr)
}

// GetRegisteredTrustNodes is a free data retrieval call binding the contract method 0x252d3bc5.
//
// Solidity: function getRegisteredTrustNodes() view returns(address[])
func (_TrustManager *TrustManagerCaller) GetRegisteredTrustNodes(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "getRegisteredTrustNodes")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRegisteredTrustNodes is a free data retrieval call binding the contract method 0x252d3bc5.
//
// Solidity: function getRegisteredTrustNodes() view returns(address[])
func (_TrustManager *TrustManagerSession) GetRegisteredTrustNodes() ([]common.Address, error) {
	return _TrustManager.Contract.GetRegisteredTrustNodes(&_TrustManager.CallOpts)
}

// GetRegisteredTrustNodes is a free data retrieval call binding the contract method 0x252d3bc5.
//
// Solidity: function getRegisteredTrustNodes() view returns(address[])
func (_TrustManager *TrustManagerCallerSession) GetRegisteredTrustNodes() ([]common.Address, error) {
	return _TrustManager.Contract.GetRegisteredTrustNodes(&_TrustManager.CallOpts)
}

// HasDirectScore is a free data retrieval call binding the contract method 0x48f5ae63.
//
// Solidity: function hasDirectScore(address addr, address target) view returns(bool)
func (_TrustManager *TrustManagerCaller) HasDirectScore(opts *bind.CallOpts, addr common.Address, target common.Address) (bool, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "hasDirectScore", addr, target)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasDirectScore is a free data retrieval call binding the contract method 0x48f5ae63.
//
// Solidity: function hasDirectScore(address addr, address target) view returns(bool)
func (_TrustManager *TrustManagerSession) HasDirectScore(addr common.Address, target common.Address) (bool, error) {
	return _TrustManager.Contract.HasDirectScore(&_TrustManager.CallOpts, addr, target)
}

// HasDirectScore is a free data retrieval call binding the contract method 0x48f5ae63.
//
// Solidity: function hasDirectScore(address addr, address target) view returns(bool)
func (_TrustManager *TrustManagerCallerSession) HasDirectScore(addr common.Address, target common.Address) (bool, error) {
	return _TrustManager.Contract.HasDirectScore(&_TrustManager.CallOpts, addr, target)
}

// IsIPAvailable is a free data retrieval call binding the contract method 0x6529f642.
//
// Solidity: function isIPAvailable(string ip) view returns(bool)
func (_TrustManager *TrustManagerCaller) IsIPAvailable(opts *bind.CallOpts, ip string) (bool, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "isIPAvailable", ip)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsIPAvailable is a free data retrieval call binding the contract method 0x6529f642.
//
// Solidity: function isIPAvailable(string ip) view returns(bool)
func (_TrustManager *TrustManagerSession) IsIPAvailable(ip string) (bool, error) {
	return _TrustManager.Contract.IsIPAvailable(&_TrustManager.CallOpts, ip)
}

// IsIPAvailable is a free data retrieval call binding the contract method 0x6529f642.
//
// Solidity: function isIPAvailable(string ip) view returns(bool)
func (_TrustManager *TrustManagerCallerSession) IsIPAvailable(ip string) (bool, error) {
	return _TrustManager.Contract.IsIPAvailable(&_TrustManager.CallOpts, ip)
}

// IsTrustNodeRegistered is a free data retrieval call binding the contract method 0xba6050f5.
//
// Solidity: function isTrustNodeRegistered(address addr) view returns(bool)
func (_TrustManager *TrustManagerCaller) IsTrustNodeRegistered(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "isTrustNodeRegistered", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustNodeRegistered is a free data retrieval call binding the contract method 0xba6050f5.
//
// Solidity: function isTrustNodeRegistered(address addr) view returns(bool)
func (_TrustManager *TrustManagerSession) IsTrustNodeRegistered(addr common.Address) (bool, error) {
	return _TrustManager.Contract.IsTrustNodeRegistered(&_TrustManager.CallOpts, addr)
}

// IsTrustNodeRegistered is a free data retrieval call binding the contract method 0xba6050f5.
//
// Solidity: function isTrustNodeRegistered(address addr) view returns(bool)
func (_TrustManager *TrustManagerCallerSession) IsTrustNodeRegistered(addr common.Address) (bool, error) {
	return _TrustManager.Contract.IsTrustNodeRegistered(&_TrustManager.CallOpts, addr)
}

// NodeIPs is a free data retrieval call binding the contract method 0xfd4121e9.
//
// Solidity: function nodeIPs(string ) view returns(address)
func (_TrustManager *TrustManagerCaller) NodeIPs(opts *bind.CallOpts, arg0 string) (common.Address, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "nodeIPs", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeIPs is a free data retrieval call binding the contract method 0xfd4121e9.
//
// Solidity: function nodeIPs(string ) view returns(address)
func (_TrustManager *TrustManagerSession) NodeIPs(arg0 string) (common.Address, error) {
	return _TrustManager.Contract.NodeIPs(&_TrustManager.CallOpts, arg0)
}

// NodeIPs is a free data retrieval call binding the contract method 0xfd4121e9.
//
// Solidity: function nodeIPs(string ) view returns(address)
func (_TrustManager *TrustManagerCallerSession) NodeIPs(arg0 string) (common.Address, error) {
	return _TrustManager.Contract.NodeIPs(&_TrustManager.CallOpts, arg0)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_TrustManager *TrustManagerCaller) Nodes(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "nodes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_TrustManager *TrustManagerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _TrustManager.Contract.Nodes(&_TrustManager.CallOpts, arg0)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_TrustManager *TrustManagerCallerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _TrustManager.Contract.Nodes(&_TrustManager.CallOpts, arg0)
}

// NormalizeMetricValue is a free data retrieval call binding the contract method 0xc61223f9.
//
// Solidity: function normalizeMetricValue(int256 x_m, int256 t_m) view returns(int256)
func (_TrustManager *TrustManagerCaller) NormalizeMetricValue(opts *bind.CallOpts, x_m *big.Int, t_m *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "normalizeMetricValue", x_m, t_m)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NormalizeMetricValue is a free data retrieval call binding the contract method 0xc61223f9.
//
// Solidity: function normalizeMetricValue(int256 x_m, int256 t_m) view returns(int256)
func (_TrustManager *TrustManagerSession) NormalizeMetricValue(x_m *big.Int, t_m *big.Int) (*big.Int, error) {
	return _TrustManager.Contract.NormalizeMetricValue(&_TrustManager.CallOpts, x_m, t_m)
}

// NormalizeMetricValue is a free data retrieval call binding the contract method 0xc61223f9.
//
// Solidity: function normalizeMetricValue(int256 x_m, int256 t_m) view returns(int256)
func (_TrustManager *TrustManagerCallerSession) NormalizeMetricValue(x_m *big.Int, t_m *big.Int) (*big.Int, error) {
	return _TrustManager.Contract.NormalizeMetricValue(&_TrustManager.CallOpts, x_m, t_m)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint256 deployedAt)
func (_TrustManager *TrustManagerCaller) State(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TrustManager.contract.Call(opts, &out, "state")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint256 deployedAt)
func (_TrustManager *TrustManagerSession) State() (*big.Int, error) {
	return _TrustManager.Contract.State(&_TrustManager.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint256 deployedAt)
func (_TrustManager *TrustManagerCallerSession) State() (*big.Int, error) {
	return _TrustManager.Contract.State(&_TrustManager.CallOpts)
}

// ComputeNewRScore is a paid mutator transaction binding the contract method 0x0a5f4db2.
//
// Solidity: function computeNewRScore(address target) returns(int256 r)
func (_TrustManager *TrustManagerTransactor) ComputeNewRScore(opts *bind.TransactOpts, target common.Address) (*types.Transaction, error) {
	return _TrustManager.contract.Transact(opts, "computeNewRScore", target)
}

// ComputeNewRScore is a paid mutator transaction binding the contract method 0x0a5f4db2.
//
// Solidity: function computeNewRScore(address target) returns(int256 r)
func (_TrustManager *TrustManagerSession) ComputeNewRScore(target common.Address) (*types.Transaction, error) {
	return _TrustManager.Contract.ComputeNewRScore(&_TrustManager.TransactOpts, target)
}

// ComputeNewRScore is a paid mutator transaction binding the contract method 0x0a5f4db2.
//
// Solidity: function computeNewRScore(address target) returns(int256 r)
func (_TrustManager *TrustManagerTransactorSession) ComputeNewRScore(target common.Address) (*types.Transaction, error) {
	return _TrustManager.Contract.ComputeNewRScore(&_TrustManager.TransactOpts, target)
}

// RegisterTrustNode is a paid mutator transaction binding the contract method 0xc7709f15.
//
// Solidity: function registerTrustNode(string ip) returns()
func (_TrustManager *TrustManagerTransactor) RegisterTrustNode(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _TrustManager.contract.Transact(opts, "registerTrustNode", ip)
}

// RegisterTrustNode is a paid mutator transaction binding the contract method 0xc7709f15.
//
// Solidity: function registerTrustNode(string ip) returns()
func (_TrustManager *TrustManagerSession) RegisterTrustNode(ip string) (*types.Transaction, error) {
	return _TrustManager.Contract.RegisterTrustNode(&_TrustManager.TransactOpts, ip)
}

// RegisterTrustNode is a paid mutator transaction binding the contract method 0xc7709f15.
//
// Solidity: function registerTrustNode(string ip) returns()
func (_TrustManager *TrustManagerTransactorSession) RegisterTrustNode(ip string) (*types.Transaction, error) {
	return _TrustManager.Contract.RegisterTrustNode(&_TrustManager.TransactOpts, ip)
}

// SendEvidence is a paid mutator transaction binding the contract method 0x1eeb4ed7.
//
// Solidity: function sendEvidence(address target, uint64 _slaId, (string,int256)[] _metrics) returns()
func (_TrustManager *TrustManagerTransactor) SendEvidence(opts *bind.TransactOpts, target common.Address, _slaId uint64, _metrics []TypesEvidenceMetric) (*types.Transaction, error) {
	return _TrustManager.contract.Transact(opts, "sendEvidence", target, _slaId, _metrics)
}

// SendEvidence is a paid mutator transaction binding the contract method 0x1eeb4ed7.
//
// Solidity: function sendEvidence(address target, uint64 _slaId, (string,int256)[] _metrics) returns()
func (_TrustManager *TrustManagerSession) SendEvidence(target common.Address, _slaId uint64, _metrics []TypesEvidenceMetric) (*types.Transaction, error) {
	return _TrustManager.Contract.SendEvidence(&_TrustManager.TransactOpts, target, _slaId, _metrics)
}

// SendEvidence is a paid mutator transaction binding the contract method 0x1eeb4ed7.
//
// Solidity: function sendEvidence(address target, uint64 _slaId, (string,int256)[] _metrics) returns()
func (_TrustManager *TrustManagerTransactorSession) SendEvidence(target common.Address, _slaId uint64, _metrics []TypesEvidenceMetric) (*types.Transaction, error) {
	return _TrustManager.Contract.SendEvidence(&_TrustManager.TransactOpts, target, _slaId, _metrics)
}
